void setup() {
  // put your setup code here, to run once:
      asm volatile (
  "	.equ	APBCLK,		40000000  \n"
"	.equ	BAUD,		115200  \n"
"  \n"
"	.equ	RX_PIN,		5  \n"
"	.equ	TX_PIN,		4  \n"
"  \n"
"	.equ	LOADADDR,	0x08010100  \n"
"	.equ	RAM,		0x20000000  \n"
"	.equ	STACK,		RAM + 0x28000  \n"
"  \n"
"	.equ	PERIPH_BASE,	0x40000000  \n"
"	.equ	APB_BASE,	PERIPH_BASE + 0x10000  \n"
"  \n"
"	.equ	GPIOA_BASE,	APB_BASE + 0x0C00  \n"
"	.equ	GPIO_DATA,	0x00  \n"
"	.equ	GPIO_EN,	0x04  \n"
"	.equ	GPIO_DIR,	0x08  \n"
"	.equ	GPIO_REN,	0x0C  \n"
"	.equ	GPIO_AFSEL,	0x10  \n"
"	.equ	GPIO_AFS1,	0x14  \n"
"	.equ	GPIO_AFS0,	0x18  \n"
"  \n"
"	.equ	UART0_BASE,	APB_BASE + 0x0800  \n"
"	.equ	LINE_CTRL,	0x00  \n"
"	.equ	FLOW_CTRL,	0x04  \n"
"	.equ	DMA_CTRL,	0x08  \n"
"	.equ	FIFO_CTRL,	0x0C  \n"
"	.equ	BAUD_RATE_CTRL,	0x10  \n"
"	.equ	INT_MASK,	0x14  \n"
"	.equ	INT_SRC,	0x18  \n"
"	.equ	FIFO_STATUS,	0x1C  \n"
"	.equ	TX_WIN,		0x20  \n"
"	.equ	RX_WIN,		0x30  \n"
"  \n"
"	.equ	ULCON_WL5,		0x00  \n"
"	.equ	ULCON_WL6,		0x01  \n"
"	.equ	ULCON_WL7,		0x02  \n"
"	.equ	ULCON_WL8,		0x03  \n"
"	.equ	ULCON_STOP_2,		0x04  @ 2 stop bit  \n"
"	.equ	ULCON_PMD_EN,		0x08  @ no parity  \n"
"	.equ	ULCON_PMD_ODD,		0x18  @ odd parity	  \n"
"	.equ	ULCON_PMD_EVEN,		0x08  @ even parity  \n"
"	.equ	ULCON_TX_EN,		0x40  \n"
"	.equ	ULCON_RX_EN,		0x80  \n"
"  \n"
      );
}

void loop() {
  // put your main code here, to run repeatedly:
      asm volatile (

"reset:  \n"
"	ldr	r1, stackaddr  \n"
"	mov	sp, r1  \n"
"	ldr	r1, startaddr  \n"
"	bx	r1  \n"
"stackaddr:  \n"
"	.word	STACK  \n"
"startaddr:  \n"
"	.word	start+1  \n"
"  \n"
"	.align	3  \n"
"start:  \n"
"  \n"
"	ldr	r2, gpio_base  \n"
"  \n"
"	@ enable GPIO function connected to PA4, PA5  \n"
"	mov	r1, #((1<<RX_PIN)|(1<<TX_PIN))  \n"
"	ldr	r3, [r2, #GPIO_AFSEL]  \n"
"	orr	r3, r1  \n"
"	str	r3, [r2, #GPIO_AFSEL]  \n"
"	mvn	r1, r1  \n"
"	ldr	r3, [r2, #GPIO_AFS0]  \n"
"	and	r3, r1  \n"
"	str	r3, [r2, #GPIO_AFS0]  \n"
"	ldr	r3, [r2, #GPIO_AFS1]  \n"
"	and	r3, r1  \n"
"	str	r3, [r2, #GPIO_AFS1]  \n"
"  \n"
"	@ enable push-pull on rx pin (0=enable pull, 1=disable pull)  \n"
"	mov	r1, #~(1<<RX_PIN)  \n"
"	ldr	r3, [r2, #GPIO_REN]	  \n"
"	and	r3, r1  \n"
"	str	r3, [r2, #GPIO_REN]  \n"
"  \n"
"	ldr 	r2, uart_base  \n"
"  \n"
"	ldr	r3, baud_register  \n"
"	str	r3, [r2, #BAUD_RATE_CTRL]  \n"
"  \n"
"	mov	r3, #(ULCON_WL8 | ULCON_TX_EN | ULCON_RX_EN)  \n"
"	str	r3, [r2, #LINE_CTRL]  \n"
"  \n"
"	mov	r3, #0  \n"
"	str	r3, [r2, #FLOW_CTRL]	@ disable flow control  \n"
"	str	r3, [r2, #DMA_CTRL]	@ disable dma  \n"
"	str	r3, [r2, #FIFO_CTRL]	@ one-byte tx  \n"
"  \n"
"	mov	r3, #0xFF  \n"
"	str	r3, [r2, #INT_MASK]	@ disable interrupts  \n"
"  \n"
"loop:  \n"
"  \n"
"recvchar:  \n"
"	mov	r1, #0xFC0  \n"
"1:  \n"
"	ldr	r3, [r2, #FIFO_STATUS]	  \n"
"	and	r3, r1  \n"
"	beq	1b  \n"
"  \n"
"	ldr	r0, [r2, #RX_WIN]  \n"
"  \n"
"sendchar:  \n"
"	mov	r1, #0x3F  \n"
"1:  \n"
"	ldr	r3, [r2, #FIFO_STATUS]  \n"
"	and	r3, r1  \n"
"	bne	1b  \n"
"  \n"
"	str	r0, [r2, #TX_WIN]  \n"
"  \n"
"	b	loop  \n"
"  \n"
"	.align	3  \n"
"gpio_base:  \n"
"	.word	GPIOA_BASE  \n"
"uart_base:  \n"
"	.word	UART0_BASE  \n"
"	@ baud register (115200 : 21, 9600 : 260)  \n"
"baud_register:  \n"
"	.word	(APBCLK / (16 * BAUD) - 1) | (((APBCLK % (BAUD * 16)) * 16 / (BAUD * 16)) << 16)  \n"
"  \n"
      );
}



